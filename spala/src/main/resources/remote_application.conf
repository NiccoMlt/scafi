akka {
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    serialize-messages = off
    serialize-creators = off
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      custom = "it.unibo.scafi.distrib.actor.serialization.CustomAkkaSerializer"
    }

    serialization-bindings {
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgLocalSensorValue" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgSensorValue" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgNbrSensorValue" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgExport" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgExports" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgNeighbor" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgNeighborhood" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MyNameIs" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgRound" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgUpdateProgram" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgPosition" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgRegistration" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgGetNeighborhoodLocations" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgNeighborhoodLocations" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgGetNeighborhoodExports" = custom
      "it.unibo.scafi.distrib.actor.PlatformMessages$MsgNeighborhoodExports" = custom
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1" // the machine you want to run the actor system on
      port = 2552  //  the port the actor system should listen on (0 to choose automatically)
    }
  }
}